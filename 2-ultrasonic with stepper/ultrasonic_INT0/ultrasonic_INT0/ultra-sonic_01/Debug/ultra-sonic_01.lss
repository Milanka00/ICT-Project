
ultra-sonic_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000738  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000007ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f22  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000904  00000000  00000000  000017ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080e  00000000  00000000  000020ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  000028fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00002a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000681  00000000  00000000  00002e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  74:	0c 94 9a 03 	jmp	0x734	; 0x734 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initDCMotors>:
 *  Author: Dasith
 */ 
#include "dcmotor.h"

void initDCMotors(){
	DDRB |= (1<<PB0) | (1<<PB1);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	83 60       	ori	r24, 0x03	; 3
  80:	87 bb       	out	0x17, r24	; 23
  82:	08 95       	ret

00000084 <rotateDCMotors>:
}

void rotateDCMotors(int direction)
{
	if (direction != 0)
  84:	89 2b       	or	r24, r25
  86:	39 f0       	breq	.+14     	; 0x96 <rotateDCMotors+0x12>
	{
		//rotate DC motor Counterclockwise
		PORTB |= (1 << PB0);
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~(1 << PB1);
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	8d 7f       	andi	r24, 0xFD	; 253
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret
	}
	else
	{
		// Rotate DC motor Clockwise ?
		PORTB &= ~(1 << PB0);
  96:	88 b3       	in	r24, 0x18	; 24
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB1);
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	88 bb       	out	0x18, r24	; 24
  a2:	08 95       	ret

000000a4 <stopDCMotors>:
}

void stopDCMotors()
{
	// stop Rotation DC motor
	PORTB &= ~(1 << PB0);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	8e 7f       	andi	r24, 0xFE	; 254
  a8:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1 << PB1);
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	08 95       	ret

000000b2 <initSteppers>:
 */ 

#include "stepper.h"

void initSteppers(){
	DDRA = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  b6:	84 bb       	out	0x14, r24	; 20
  b8:	08 95       	ret

000000ba <rotateStepper_3>:
}

void rotateStepper_3(int distance){
  ba:	ac 01       	movw	r20, r24
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 5;
	if (distance>0)
  bc:	18 16       	cp	r1, r24
  be:	19 06       	cpc	r1, r25
  c0:	6c f1       	brlt	.+90     	; 0x11c <rotateStepper_3+0x62>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	5e c0       	rjmp	.+188    	; 0x184 <rotateStepper_3+0xca>
	{
		/* Rotate  clockwise */
		for(int i=0;i<distance;i++)
		{
			PORTC = 0x03;
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	ef e1       	ldi	r30, 0x1F	; 31
  ce:	fe e4       	ldi	r31, 0x4E	; 78
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <rotateStepper_3+0x16>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <rotateStepper_3+0x1c>
  d6:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x06;
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	85 bb       	out	0x15, r24	; 21
  dc:	ef e1       	ldi	r30, 0x1F	; 31
  de:	fe e4       	ldi	r31, 0x4E	; 78
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <rotateStepper_3+0x26>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <rotateStepper_3+0x2c>
  e6:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x0c;
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	ef e1       	ldi	r30, 0x1F	; 31
  ee:	fe e4       	ldi	r31, 0x4E	; 78
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <rotateStepper_3+0x36>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <rotateStepper_3+0x3c>
  f6:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x09;
  f8:	89 e0       	ldi	r24, 0x09	; 9
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	ef e1       	ldi	r30, 0x1F	; 31
  fe:	fe e4       	ldi	r31, 0x4E	; 78
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <rotateStepper_3+0x46>
 104:	00 c0       	rjmp	.+0      	; 0x106 <rotateStepper_3+0x4c>
 106:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x03;
 108:	95 bb       	out	0x15, r25	; 21
 10a:	8f e1       	ldi	r24, 0x1F	; 31
 10c:	9e e4       	ldi	r25, 0x4E	; 78
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <rotateStepper_3+0x54>
 112:	00 c0       	rjmp	.+0      	; 0x114 <rotateStepper_3+0x5a>
 114:	00 00       	nop
	int period;
	period = 5;
	if (distance>0)
	{
		/* Rotate  clockwise */
		for(int i=0;i<distance;i++)
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	02 c0       	rjmp	.+4      	; 0x120 <rotateStepper_3+0x66>
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	24 17       	cp	r18, r20
 122:	35 07       	cpc	r19, r21
 124:	8c f2       	brlt	.-94     	; 0xc8 <rotateStepper_3+0xe>
 126:	ef e3       	ldi	r30, 0x3F	; 63
 128:	fc e9       	ldi	r31, 0x9C	; 156
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <rotateStepper_3+0x70>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <rotateStepper_3+0x76>
 130:	00 00       	nop
 132:	08 95       	ret
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < abs(distance); i++)
		{
			PORTC = 0x03;
 134:	23 e0       	ldi	r18, 0x03	; 3
 136:	25 bb       	out	0x15, r18	; 21
 138:	ef e1       	ldi	r30, 0x1F	; 31
 13a:	fe e4       	ldi	r31, 0x4E	; 78
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <rotateStepper_3+0x82>
 140:	00 c0       	rjmp	.+0      	; 0x142 <rotateStepper_3+0x88>
 142:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x09;
 144:	39 e0       	ldi	r19, 0x09	; 9
 146:	35 bb       	out	0x15, r19	; 21
 148:	ef e1       	ldi	r30, 0x1F	; 31
 14a:	fe e4       	ldi	r31, 0x4E	; 78
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <rotateStepper_3+0x92>
 150:	00 c0       	rjmp	.+0      	; 0x152 <rotateStepper_3+0x98>
 152:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x0c;
 154:	3c e0       	ldi	r19, 0x0C	; 12
 156:	35 bb       	out	0x15, r19	; 21
 158:	ef e1       	ldi	r30, 0x1F	; 31
 15a:	fe e4       	ldi	r31, 0x4E	; 78
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <rotateStepper_3+0xa2>
 160:	00 c0       	rjmp	.+0      	; 0x162 <rotateStepper_3+0xa8>
 162:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x06;
 164:	36 e0       	ldi	r19, 0x06	; 6
 166:	35 bb       	out	0x15, r19	; 21
 168:	ef e1       	ldi	r30, 0x1F	; 31
 16a:	fe e4       	ldi	r31, 0x4E	; 78
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <rotateStepper_3+0xb2>
 170:	00 c0       	rjmp	.+0      	; 0x172 <rotateStepper_3+0xb8>
 172:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x03;
 174:	25 bb       	out	0x15, r18	; 21
 176:	ef e1       	ldi	r30, 0x1F	; 31
 178:	fe e4       	ldi	r31, 0x4E	; 78
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <rotateStepper_3+0xc0>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <rotateStepper_3+0xc6>
 180:	00 00       	nop
		_delay_ms(10);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < abs(distance); i++)
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	9a 01       	movw	r18, r20
 186:	55 23       	and	r21, r21
 188:	24 f4       	brge	.+8      	; 0x192 <rotateStepper_3+0xd8>
 18a:	22 27       	eor	r18, r18
 18c:	33 27       	eor	r19, r19
 18e:	24 1b       	sub	r18, r20
 190:	35 0b       	sbc	r19, r21
 192:	82 17       	cp	r24, r18
 194:	93 07       	cpc	r25, r19
 196:	74 f2       	brlt	.-100    	; 0x134 <rotateStepper_3+0x7a>
 198:	8f e3       	ldi	r24, 0x3F	; 63
 19a:	9c e9       	ldi	r25, 0x9C	; 156
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <rotateStepper_3+0xe2>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <rotateStepper_3+0xe8>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <initUltrasonic>:
int timerOverFlow=0;
static volatile int ult_count;

void initUltrasonic(){
	
	DDRD |=(1<<PD7);//set PD7 output pin
 1a6:	81 b3       	in	r24, 0x11	; 17
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	81 bb       	out	0x11, r24	; 17
	
	GICR |= (1<<INT0); //enabling interupt 0
 1ac:	8b b7       	in	r24, 0x3b	; 59
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	8b bf       	out	0x3b, r24	; 59
	//General Interrupt Control Register
	MCUCR|= (1<<ISC00); //setting interrupt triggering logic change
 1b2:	85 b7       	in	r24, 0x35	; 53
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	85 bf       	out	0x35, r24	; 53
	// MCU control Register
	TIMSK|=(1<<TOIE0);
 1b8:	89 b7       	in	r24, 0x39	; 57
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	89 bf       	out	0x39, r24	; 57
	
	TCCR0 = 0;
 1be:	13 be       	out	0x33, r1	; 51
 1c0:	08 95       	ret

000001c2 <getUltrasonic_1_distance>:
}

int getUltrasonic_1_distance(){
	int pulse;
	PORTD |= (1<<PIND7);
 1c2:	82 b3       	in	r24, 0x12	; 18
 1c4:	80 68       	ori	r24, 0x80	; 128
 1c6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
 1ca:	8a 95       	dec	r24
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <getUltrasonic_1_distance+0x8>
	_delay_us(30); //triggering the sensor for 15usec
	PORTD &= (~(1<<PIND7));
 1ce:	82 b3       	in	r24, 0x12	; 18
 1d0:	8f 77       	andi	r24, 0x7F	; 127
 1d2:	82 bb       	out	0x12, r24	; 18
 1d4:	89 ef       	ldi	r24, 0xF9	; 249
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <getUltrasonic_1_distance+0x16>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <getUltrasonic_1_distance+0x1c>
 1de:	00 00       	nop
	
	_delay_us(1000);
	
	pulse=ult_count;
 1e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1e4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
	return ceil(pulse/58)+1;
 1e8:	6a e3       	ldi	r22, 0x3A	; 58
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__divmodhi4>
 1f0:	07 2e       	mov	r0, r23
 1f2:	00 0c       	add	r0, r0
 1f4:	88 0b       	sbc	r24, r24
 1f6:	99 0b       	sbc	r25, r25
 1f8:	0e 94 a5 02 	call	0x54a	; 0x54a <__floatsisf>
 1fc:	0e 94 56 02 	call	0x4ac	; 0x4ac <ceil>
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	40 e8       	ldi	r20, 0x80	; 128
 206:	5f e3       	ldi	r21, 0x3F	; 63
 208:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
 20c:	0e 94 6d 02 	call	0x4da	; 0x4da <__fixsfsi>
}
 210:	cb 01       	movw	r24, r22
 212:	08 95       	ret

00000214 <__vector_1>:

ISR(INT0_vect) //interrupt service routine when there is a change in logic level

{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25

	if (i==1)//when logic from HIGH to LOW
 224:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 228:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <i+0x1>
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	89 f4       	brne	.+34     	; 0x252 <__vector_1+0x3e>

	{

		TCCR0=0; //disabling counter
 230:	13 be       	out	0x33, r1	; 51

		ult_count=TCNT0+timerOverFlow;//count memory is updated to integer
 232:	22 b7       	in	r18, 0x32	; 50
 234:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <timerOverFlow>
 238:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <timerOverFlow+0x1>
 23c:	82 0f       	add	r24, r18
 23e:	91 1d       	adc	r25, r1
 240:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 244:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		
		TCNT0=0;//resetting the counter memory
 248:	12 be       	out	0x32, r1	; 50

		i=0;
 24a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <i+0x1>
 24e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <i>

	}

	if (i==0)//when logic change from LOW to HIGH
 252:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 256:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <i+0x1>
 25a:	89 2b       	or	r24, r25
 25c:	49 f4       	brne	.+18     	; 0x270 <__vector_1+0x5c>

	{

		TCCR0|=(1<<CS10);//enabling counter
 25e:	83 b7       	in	r24, 0x33	; 51
 260:	81 60       	ori	r24, 0x01	; 1
 262:	83 bf       	out	0x33, r24	; 51

		i=1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <i+0x1>
 26c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <i>

	}
	timerOverFlow=0;
 270:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timerOverFlow+0x1>
 274:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <timerOverFlow>

}
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
	timerOverFlow+=256;
 296:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <timerOverFlow>
 29a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <timerOverFlow+0x1>
 29e:	93 95       	inc	r25
 2a0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <timerOverFlow+0x1>
 2a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <timerOverFlow>
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <main>:
#include "stepper.h"
int static volatile ult1_distance;

int main(void)
{
	initDCMotors();
 2b6:	0e 94 3e 00 	call	0x7c	; 0x7c <initDCMotors>
	initUltrasonic();
 2ba:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <initUltrasonic>
	initSteppers();
 2be:	0e 94 59 00 	call	0xb2	; 0xb2 <initSteppers>
 
	sei();
 2c2:	78 94       	sei
	
	int rounds=3;  //quantity
	int length=20; //length
	int halfDistance=2;//distance pipe at clutch 3
		ult1_distance=getUltrasonic_1_distance();
 2c4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <getUltrasonic_1_distance>
 2c8:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ult1_distance+0x1>
 2cc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ult1_distance>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	81 ee       	ldi	r24, 0xE1	; 225
 2d4:	94 e0       	ldi	r25, 0x04	; 4
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x20>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x2a>
 2e0:	00 00       	nop
		_delay_ms(100);
	while(1)
	{	
		
		for (int i = 0; i < rounds; i++)
 2e2:	c0 e0       	ldi	r28, 0x00	; 0
 2e4:	d0 e0       	ldi	r29, 0x00	; 0
 2e6:	70 c0       	rjmp	.+224    	; 0x3c8 <main+0x112>
		{
			//rotate stepper motor2 and 1 backwards
			// move pipe forward according to the calculated length
			//rotateDCMotors(0);
		
			ult1_distance=getUltrasonic_1_distance();
 2e8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <getUltrasonic_1_distance>
 2ec:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ult1_distance+0x1>
 2f0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ult1_distance>
			while(ult1_distance>6){
 2f4:	0a c0       	rjmp	.+20     	; 0x30a <main+0x54>
				rotateDCMotors(0);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 42 00 	call	0x84	; 0x84 <rotateDCMotors>
				ult1_distance=getUltrasonic_1_distance();
 2fe:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <getUltrasonic_1_distance>
 302:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ult1_distance+0x1>
 306:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ult1_distance>
			//rotate stepper motor2 and 1 backwards
			// move pipe forward according to the calculated length
			//rotateDCMotors(0);
		
			ult1_distance=getUltrasonic_1_distance();
			while(ult1_distance>6){
 30a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ult1_distance>
 30e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ult1_distance+0x1>
 312:	07 97       	sbiw	r24, 0x07	; 7
 314:	84 f7       	brge	.-32     	; 0x2f6 <main+0x40>
				rotateDCMotors(0);
				ult1_distance=getUltrasonic_1_distance();
			};
			stopDCMotors();
 316:	0e 94 52 00 	call	0xa4	; 0xa4 <stopDCMotors>
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	83 ec       	ldi	r24, 0xC3	; 195
 31e:	99 e0       	ldi	r25, 0x09	; 9
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <main+0x6a>
 328:	00 c0       	rjmp	.+0      	; 0x32a <main+0x74>
 32a:	00 00       	nop
			_delay_ms(200);
			//rotate stepper motor2 and 1 forward
			// rotate stepper motor3 backward 
			rotateStepper_3(-halfDistance);
 32c:	8e ef       	ldi	r24, 0xFE	; 254
 32e:	9f ef       	ldi	r25, 0xFF	; 255
 330:	0e 94 5d 00 	call	0xba	; 0xba <rotateStepper_3>
 334:	2f ef       	ldi	r18, 0xFF	; 255
 336:	81 ee       	ldi	r24, 0xE1	; 225
 338:	94 e0       	ldi	r25, 0x04	; 4
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	90 40       	sbci	r25, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <main+0x84>
 342:	00 c0       	rjmp	.+0      	; 0x344 <main+0x8e>
 344:	00 00       	nop
			_delay_ms(100);
			// get ultrasonic1 output distance (distance1)
			ult1_distance=getUltrasonic_1_distance();
 346:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <getUltrasonic_1_distance>
 34a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ult1_distance+0x1>
 34e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ult1_distance>
			
			rotateDCMotors(1);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 42 00 	call	0x84	; 0x84 <rotateDCMotors>
			// move clutches though rail until ult1_distance-instantDistance==length
			while((getUltrasonic_1_distance()-ult1_distance)!=length){
 35a:	04 c0       	rjmp	.+8      	; 0x364 <main+0xae>
				rotateDCMotors(1);
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 42 00 	call	0x84	; 0x84 <rotateDCMotors>
			// get ultrasonic1 output distance (distance1)
			ult1_distance=getUltrasonic_1_distance();
			
			rotateDCMotors(1);
			// move clutches though rail until ult1_distance-instantDistance==length
			while((getUltrasonic_1_distance()-ult1_distance)!=length){
 364:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <getUltrasonic_1_distance>
 368:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <ult1_distance>
 36c:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <ult1_distance+0x1>
 370:	82 1b       	sub	r24, r18
 372:	93 0b       	sbc	r25, r19
 374:	44 97       	sbiw	r24, 0x14	; 20
 376:	91 f7       	brne	.-28     	; 0x35c <main+0xa6>
				rotateDCMotors(1);
			};
			stopDCMotors();
 378:	0e 94 52 00 	call	0xa4	; 0xa4 <stopDCMotors>
 37c:	2f ef       	ldi	r18, 0xFF	; 255
 37e:	83 ec       	ldi	r24, 0xC3	; 195
 380:	99 e0       	ldi	r25, 0x09	; 9
 382:	21 50       	subi	r18, 0x01	; 1
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0xcc>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0xd6>
 38c:	00 00       	nop
			_delay_ms(200);
			ult1_distance=getUltrasonic_1_distance();
 38e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <getUltrasonic_1_distance>
 392:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ult1_distance+0x1>
 396:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ult1_distance>
 39a:	2f ef       	ldi	r18, 0xFF	; 255
 39c:	81 ee       	ldi	r24, 0xE1	; 225
 39e:	94 e0       	ldi	r25, 0x04	; 4
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	90 40       	sbci	r25, 0x00	; 0
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0xea>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0xf4>
 3aa:	00 00       	nop
			_delay_ms(100);
			// rotate stepper motor3 forward
			rotateStepper_3(halfDistance);
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 5d 00 	call	0xba	; 0xba <rotateStepper_3>
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	83 ec       	ldi	r24, 0xC3	; 195
 3b8:	99 e0       	ldi	r25, 0x09	; 9
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x104>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x10e>
 3c4:	00 00       	nop
		ult1_distance=getUltrasonic_1_distance();
		_delay_ms(100);
	while(1)
	{	
		
		for (int i = 0; i < rounds; i++)
 3c6:	21 96       	adiw	r28, 0x01	; 1
 3c8:	c3 30       	cpi	r28, 0x03	; 3
 3ca:	d1 05       	cpc	r29, r1
 3cc:	0c f4       	brge	.+2      	; 0x3d0 <main+0x11a>
 3ce:	8c cf       	rjmp	.-232    	; 0x2e8 <main+0x32>
 3d0:	88 cf       	rjmp	.-240    	; 0x2e2 <main+0x2c>

000003d2 <__subsf3>:
 3d2:	50 58       	subi	r21, 0x80	; 128

000003d4 <__addsf3>:
 3d4:	bb 27       	eor	r27, r27
 3d6:	aa 27       	eor	r26, r26
 3d8:	0e 94 01 02 	call	0x402	; 0x402 <__addsf3x>
 3dc:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_round>
 3e0:	0e 94 12 03 	call	0x624	; 0x624 <__fp_pscA>
 3e4:	38 f0       	brcs	.+14     	; 0x3f4 <__addsf3+0x20>
 3e6:	0e 94 19 03 	call	0x632	; 0x632 <__fp_pscB>
 3ea:	20 f0       	brcs	.+8      	; 0x3f4 <__addsf3+0x20>
 3ec:	39 f4       	brne	.+14     	; 0x3fc <__addsf3+0x28>
 3ee:	9f 3f       	cpi	r25, 0xFF	; 255
 3f0:	19 f4       	brne	.+6      	; 0x3f8 <__addsf3+0x24>
 3f2:	26 f4       	brtc	.+8      	; 0x3fc <__addsf3+0x28>
 3f4:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_nan>
 3f8:	0e f4       	brtc	.+2      	; 0x3fc <__addsf3+0x28>
 3fa:	e0 95       	com	r30
 3fc:	e7 fb       	bst	r30, 7
 3fe:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_inf>

00000402 <__addsf3x>:
 402:	e9 2f       	mov	r30, r25
 404:	0e 94 31 03 	call	0x662	; 0x662 <__fp_split3>
 408:	58 f3       	brcs	.-42     	; 0x3e0 <__addsf3+0xc>
 40a:	ba 17       	cp	r27, r26
 40c:	62 07       	cpc	r22, r18
 40e:	73 07       	cpc	r23, r19
 410:	84 07       	cpc	r24, r20
 412:	95 07       	cpc	r25, r21
 414:	20 f0       	brcs	.+8      	; 0x41e <__addsf3x+0x1c>
 416:	79 f4       	brne	.+30     	; 0x436 <__addsf3x+0x34>
 418:	a6 f5       	brtc	.+104    	; 0x482 <__addsf3x+0x80>
 41a:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_zero>
 41e:	0e f4       	brtc	.+2      	; 0x422 <__addsf3x+0x20>
 420:	e0 95       	com	r30
 422:	0b 2e       	mov	r0, r27
 424:	ba 2f       	mov	r27, r26
 426:	a0 2d       	mov	r26, r0
 428:	0b 01       	movw	r0, r22
 42a:	b9 01       	movw	r22, r18
 42c:	90 01       	movw	r18, r0
 42e:	0c 01       	movw	r0, r24
 430:	ca 01       	movw	r24, r20
 432:	a0 01       	movw	r20, r0
 434:	11 24       	eor	r1, r1
 436:	ff 27       	eor	r31, r31
 438:	59 1b       	sub	r21, r25
 43a:	99 f0       	breq	.+38     	; 0x462 <__addsf3x+0x60>
 43c:	59 3f       	cpi	r21, 0xF9	; 249
 43e:	50 f4       	brcc	.+20     	; 0x454 <__addsf3x+0x52>
 440:	50 3e       	cpi	r21, 0xE0	; 224
 442:	68 f1       	brcs	.+90     	; 0x49e <__addsf3x+0x9c>
 444:	1a 16       	cp	r1, r26
 446:	f0 40       	sbci	r31, 0x00	; 0
 448:	a2 2f       	mov	r26, r18
 44a:	23 2f       	mov	r18, r19
 44c:	34 2f       	mov	r19, r20
 44e:	44 27       	eor	r20, r20
 450:	58 5f       	subi	r21, 0xF8	; 248
 452:	f3 cf       	rjmp	.-26     	; 0x43a <__addsf3x+0x38>
 454:	46 95       	lsr	r20
 456:	37 95       	ror	r19
 458:	27 95       	ror	r18
 45a:	a7 95       	ror	r26
 45c:	f0 40       	sbci	r31, 0x00	; 0
 45e:	53 95       	inc	r21
 460:	c9 f7       	brne	.-14     	; 0x454 <__addsf3x+0x52>
 462:	7e f4       	brtc	.+30     	; 0x482 <__addsf3x+0x80>
 464:	1f 16       	cp	r1, r31
 466:	ba 0b       	sbc	r27, r26
 468:	62 0b       	sbc	r22, r18
 46a:	73 0b       	sbc	r23, r19
 46c:	84 0b       	sbc	r24, r20
 46e:	ba f0       	brmi	.+46     	; 0x49e <__addsf3x+0x9c>
 470:	91 50       	subi	r25, 0x01	; 1
 472:	a1 f0       	breq	.+40     	; 0x49c <__addsf3x+0x9a>
 474:	ff 0f       	add	r31, r31
 476:	bb 1f       	adc	r27, r27
 478:	66 1f       	adc	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	88 1f       	adc	r24, r24
 47e:	c2 f7       	brpl	.-16     	; 0x470 <__addsf3x+0x6e>
 480:	0e c0       	rjmp	.+28     	; 0x49e <__addsf3x+0x9c>
 482:	ba 0f       	add	r27, r26
 484:	62 1f       	adc	r22, r18
 486:	73 1f       	adc	r23, r19
 488:	84 1f       	adc	r24, r20
 48a:	48 f4       	brcc	.+18     	; 0x49e <__addsf3x+0x9c>
 48c:	87 95       	ror	r24
 48e:	77 95       	ror	r23
 490:	67 95       	ror	r22
 492:	b7 95       	ror	r27
 494:	f7 95       	ror	r31
 496:	9e 3f       	cpi	r25, 0xFE	; 254
 498:	08 f0       	brcs	.+2      	; 0x49c <__addsf3x+0x9a>
 49a:	b0 cf       	rjmp	.-160    	; 0x3fc <__addsf3+0x28>
 49c:	93 95       	inc	r25
 49e:	88 0f       	add	r24, r24
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <__addsf3x+0xa2>
 4a2:	99 27       	eor	r25, r25
 4a4:	ee 0f       	add	r30, r30
 4a6:	97 95       	ror	r25
 4a8:	87 95       	ror	r24
 4aa:	08 95       	ret

000004ac <ceil>:
 4ac:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_trunc>
 4b0:	90 f0       	brcs	.+36     	; 0x4d6 <ceil+0x2a>
 4b2:	9f 37       	cpi	r25, 0x7F	; 127
 4b4:	48 f4       	brcc	.+18     	; 0x4c8 <ceil+0x1c>
 4b6:	91 11       	cpse	r25, r1
 4b8:	16 f4       	brtc	.+4      	; 0x4be <ceil+0x12>
 4ba:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_szero>
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	9f e3       	ldi	r25, 0x3F	; 63
 4c6:	08 95       	ret
 4c8:	26 f0       	brts	.+8      	; 0x4d2 <ceil+0x26>
 4ca:	1b 16       	cp	r1, r27
 4cc:	61 1d       	adc	r22, r1
 4ce:	71 1d       	adc	r23, r1
 4d0:	81 1d       	adc	r24, r1
 4d2:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_mintl>
 4d6:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_mpack>

000004da <__fixsfsi>:
 4da:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__fixunssfsi>
 4de:	68 94       	set
 4e0:	b1 11       	cpse	r27, r1
 4e2:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_szero>
 4e6:	08 95       	ret

000004e8 <__fixunssfsi>:
 4e8:	0e 94 39 03 	call	0x672	; 0x672 <__fp_splitA>
 4ec:	88 f0       	brcs	.+34     	; 0x510 <__fixunssfsi+0x28>
 4ee:	9f 57       	subi	r25, 0x7F	; 127
 4f0:	98 f0       	brcs	.+38     	; 0x518 <__fixunssfsi+0x30>
 4f2:	b9 2f       	mov	r27, r25
 4f4:	99 27       	eor	r25, r25
 4f6:	b7 51       	subi	r27, 0x17	; 23
 4f8:	b0 f0       	brcs	.+44     	; 0x526 <__fixunssfsi+0x3e>
 4fa:	e1 f0       	breq	.+56     	; 0x534 <__fixunssfsi+0x4c>
 4fc:	66 0f       	add	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	88 1f       	adc	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	1a f0       	brmi	.+6      	; 0x50c <__fixunssfsi+0x24>
 506:	ba 95       	dec	r27
 508:	c9 f7       	brne	.-14     	; 0x4fc <__fixunssfsi+0x14>
 50a:	14 c0       	rjmp	.+40     	; 0x534 <__fixunssfsi+0x4c>
 50c:	b1 30       	cpi	r27, 0x01	; 1
 50e:	91 f0       	breq	.+36     	; 0x534 <__fixunssfsi+0x4c>
 510:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fp_zero>
 514:	b1 e0       	ldi	r27, 0x01	; 1
 516:	08 95       	ret
 518:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_zero>
 51c:	67 2f       	mov	r22, r23
 51e:	78 2f       	mov	r23, r24
 520:	88 27       	eor	r24, r24
 522:	b8 5f       	subi	r27, 0xF8	; 248
 524:	39 f0       	breq	.+14     	; 0x534 <__fixunssfsi+0x4c>
 526:	b9 3f       	cpi	r27, 0xF9	; 249
 528:	cc f3       	brlt	.-14     	; 0x51c <__fixunssfsi+0x34>
 52a:	86 95       	lsr	r24
 52c:	77 95       	ror	r23
 52e:	67 95       	ror	r22
 530:	b3 95       	inc	r27
 532:	d9 f7       	brne	.-10     	; 0x52a <__fixunssfsi+0x42>
 534:	3e f4       	brtc	.+14     	; 0x544 <__fixunssfsi+0x5c>
 536:	90 95       	com	r25
 538:	80 95       	com	r24
 53a:	70 95       	com	r23
 53c:	61 95       	neg	r22
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	8f 4f       	sbci	r24, 0xFF	; 255
 542:	9f 4f       	sbci	r25, 0xFF	; 255
 544:	08 95       	ret

00000546 <__floatunsisf>:
 546:	e8 94       	clt
 548:	09 c0       	rjmp	.+18     	; 0x55c <__floatsisf+0x12>

0000054a <__floatsisf>:
 54a:	97 fb       	bst	r25, 7
 54c:	3e f4       	brtc	.+14     	; 0x55c <__floatsisf+0x12>
 54e:	90 95       	com	r25
 550:	80 95       	com	r24
 552:	70 95       	com	r23
 554:	61 95       	neg	r22
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	8f 4f       	sbci	r24, 0xFF	; 255
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	99 23       	and	r25, r25
 55e:	a9 f0       	breq	.+42     	; 0x58a <__floatsisf+0x40>
 560:	f9 2f       	mov	r31, r25
 562:	96 e9       	ldi	r25, 0x96	; 150
 564:	bb 27       	eor	r27, r27
 566:	93 95       	inc	r25
 568:	f6 95       	lsr	r31
 56a:	87 95       	ror	r24
 56c:	77 95       	ror	r23
 56e:	67 95       	ror	r22
 570:	b7 95       	ror	r27
 572:	f1 11       	cpse	r31, r1
 574:	f8 cf       	rjmp	.-16     	; 0x566 <__floatsisf+0x1c>
 576:	fa f4       	brpl	.+62     	; 0x5b6 <__floatsisf+0x6c>
 578:	bb 0f       	add	r27, r27
 57a:	11 f4       	brne	.+4      	; 0x580 <__floatsisf+0x36>
 57c:	60 ff       	sbrs	r22, 0
 57e:	1b c0       	rjmp	.+54     	; 0x5b6 <__floatsisf+0x6c>
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	16 c0       	rjmp	.+44     	; 0x5b6 <__floatsisf+0x6c>
 58a:	88 23       	and	r24, r24
 58c:	11 f0       	breq	.+4      	; 0x592 <__floatsisf+0x48>
 58e:	96 e9       	ldi	r25, 0x96	; 150
 590:	11 c0       	rjmp	.+34     	; 0x5b4 <__floatsisf+0x6a>
 592:	77 23       	and	r23, r23
 594:	21 f0       	breq	.+8      	; 0x59e <__floatsisf+0x54>
 596:	9e e8       	ldi	r25, 0x8E	; 142
 598:	87 2f       	mov	r24, r23
 59a:	76 2f       	mov	r23, r22
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <__floatsisf+0x5e>
 59e:	66 23       	and	r22, r22
 5a0:	71 f0       	breq	.+28     	; 0x5be <__floatsisf+0x74>
 5a2:	96 e8       	ldi	r25, 0x86	; 134
 5a4:	86 2f       	mov	r24, r22
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	2a f0       	brmi	.+10     	; 0x5b6 <__floatsisf+0x6c>
 5ac:	9a 95       	dec	r25
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	da f7       	brpl	.-10     	; 0x5ac <__floatsisf+0x62>
 5b6:	88 0f       	add	r24, r24
 5b8:	96 95       	lsr	r25
 5ba:	87 95       	ror	r24
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret

000005c0 <__fp_inf>:
 5c0:	97 f9       	bld	r25, 7
 5c2:	9f 67       	ori	r25, 0x7F	; 127
 5c4:	80 e8       	ldi	r24, 0x80	; 128
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	08 95       	ret

000005cc <__fp_mintl>:
 5cc:	88 23       	and	r24, r24
 5ce:	71 f4       	brne	.+28     	; 0x5ec <__fp_mintl+0x20>
 5d0:	77 23       	and	r23, r23
 5d2:	21 f0       	breq	.+8      	; 0x5dc <__fp_mintl+0x10>
 5d4:	98 50       	subi	r25, 0x08	; 8
 5d6:	87 2b       	or	r24, r23
 5d8:	76 2f       	mov	r23, r22
 5da:	07 c0       	rjmp	.+14     	; 0x5ea <__fp_mintl+0x1e>
 5dc:	66 23       	and	r22, r22
 5de:	11 f4       	brne	.+4      	; 0x5e4 <__fp_mintl+0x18>
 5e0:	99 27       	eor	r25, r25
 5e2:	0d c0       	rjmp	.+26     	; 0x5fe <__fp_mintl+0x32>
 5e4:	90 51       	subi	r25, 0x10	; 16
 5e6:	86 2b       	or	r24, r22
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	2a f0       	brmi	.+10     	; 0x5f8 <__fp_mintl+0x2c>
 5ee:	9a 95       	dec	r25
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	88 1f       	adc	r24, r24
 5f6:	da f7       	brpl	.-10     	; 0x5ee <__fp_mintl+0x22>
 5f8:	88 0f       	add	r24, r24
 5fa:	96 95       	lsr	r25
 5fc:	87 95       	ror	r24
 5fe:	97 f9       	bld	r25, 7
 600:	08 95       	ret

00000602 <__fp_mpack>:
 602:	9f 3f       	cpi	r25, 0xFF	; 255
 604:	31 f0       	breq	.+12     	; 0x612 <__fp_mpack_finite+0xc>

00000606 <__fp_mpack_finite>:
 606:	91 50       	subi	r25, 0x01	; 1
 608:	20 f4       	brcc	.+8      	; 0x612 <__fp_mpack_finite+0xc>
 60a:	87 95       	ror	r24
 60c:	77 95       	ror	r23
 60e:	67 95       	ror	r22
 610:	b7 95       	ror	r27
 612:	88 0f       	add	r24, r24
 614:	91 1d       	adc	r25, r1
 616:	96 95       	lsr	r25
 618:	87 95       	ror	r24
 61a:	97 f9       	bld	r25, 7
 61c:	08 95       	ret

0000061e <__fp_nan>:
 61e:	9f ef       	ldi	r25, 0xFF	; 255
 620:	80 ec       	ldi	r24, 0xC0	; 192
 622:	08 95       	ret

00000624 <__fp_pscA>:
 624:	00 24       	eor	r0, r0
 626:	0a 94       	dec	r0
 628:	16 16       	cp	r1, r22
 62a:	17 06       	cpc	r1, r23
 62c:	18 06       	cpc	r1, r24
 62e:	09 06       	cpc	r0, r25
 630:	08 95       	ret

00000632 <__fp_pscB>:
 632:	00 24       	eor	r0, r0
 634:	0a 94       	dec	r0
 636:	12 16       	cp	r1, r18
 638:	13 06       	cpc	r1, r19
 63a:	14 06       	cpc	r1, r20
 63c:	05 06       	cpc	r0, r21
 63e:	08 95       	ret

00000640 <__fp_round>:
 640:	09 2e       	mov	r0, r25
 642:	03 94       	inc	r0
 644:	00 0c       	add	r0, r0
 646:	11 f4       	brne	.+4      	; 0x64c <__fp_round+0xc>
 648:	88 23       	and	r24, r24
 64a:	52 f0       	brmi	.+20     	; 0x660 <__fp_round+0x20>
 64c:	bb 0f       	add	r27, r27
 64e:	40 f4       	brcc	.+16     	; 0x660 <__fp_round+0x20>
 650:	bf 2b       	or	r27, r31
 652:	11 f4       	brne	.+4      	; 0x658 <__fp_round+0x18>
 654:	60 ff       	sbrs	r22, 0
 656:	04 c0       	rjmp	.+8      	; 0x660 <__fp_round+0x20>
 658:	6f 5f       	subi	r22, 0xFF	; 255
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	08 95       	ret

00000662 <__fp_split3>:
 662:	57 fd       	sbrc	r21, 7
 664:	90 58       	subi	r25, 0x80	; 128
 666:	44 0f       	add	r20, r20
 668:	55 1f       	adc	r21, r21
 66a:	59 f0       	breq	.+22     	; 0x682 <__fp_splitA+0x10>
 66c:	5f 3f       	cpi	r21, 0xFF	; 255
 66e:	71 f0       	breq	.+28     	; 0x68c <__fp_splitA+0x1a>
 670:	47 95       	ror	r20

00000672 <__fp_splitA>:
 672:	88 0f       	add	r24, r24
 674:	97 fb       	bst	r25, 7
 676:	99 1f       	adc	r25, r25
 678:	61 f0       	breq	.+24     	; 0x692 <__fp_splitA+0x20>
 67a:	9f 3f       	cpi	r25, 0xFF	; 255
 67c:	79 f0       	breq	.+30     	; 0x69c <__fp_splitA+0x2a>
 67e:	87 95       	ror	r24
 680:	08 95       	ret
 682:	12 16       	cp	r1, r18
 684:	13 06       	cpc	r1, r19
 686:	14 06       	cpc	r1, r20
 688:	55 1f       	adc	r21, r21
 68a:	f2 cf       	rjmp	.-28     	; 0x670 <__fp_split3+0xe>
 68c:	46 95       	lsr	r20
 68e:	f1 df       	rcall	.-30     	; 0x672 <__fp_splitA>
 690:	08 c0       	rjmp	.+16     	; 0x6a2 <__fp_splitA+0x30>
 692:	16 16       	cp	r1, r22
 694:	17 06       	cpc	r1, r23
 696:	18 06       	cpc	r1, r24
 698:	99 1f       	adc	r25, r25
 69a:	f1 cf       	rjmp	.-30     	; 0x67e <__fp_splitA+0xc>
 69c:	86 95       	lsr	r24
 69e:	71 05       	cpc	r23, r1
 6a0:	61 05       	cpc	r22, r1
 6a2:	08 94       	sec
 6a4:	08 95       	ret

000006a6 <__fp_trunc>:
 6a6:	0e 94 39 03 	call	0x672	; 0x672 <__fp_splitA>
 6aa:	a0 f0       	brcs	.+40     	; 0x6d4 <__fp_trunc+0x2e>
 6ac:	be e7       	ldi	r27, 0x7E	; 126
 6ae:	b9 17       	cp	r27, r25
 6b0:	88 f4       	brcc	.+34     	; 0x6d4 <__fp_trunc+0x2e>
 6b2:	bb 27       	eor	r27, r27
 6b4:	9f 38       	cpi	r25, 0x8F	; 143
 6b6:	60 f4       	brcc	.+24     	; 0x6d0 <__fp_trunc+0x2a>
 6b8:	16 16       	cp	r1, r22
 6ba:	b1 1d       	adc	r27, r1
 6bc:	67 2f       	mov	r22, r23
 6be:	78 2f       	mov	r23, r24
 6c0:	88 27       	eor	r24, r24
 6c2:	98 5f       	subi	r25, 0xF8	; 248
 6c4:	f7 cf       	rjmp	.-18     	; 0x6b4 <__fp_trunc+0xe>
 6c6:	86 95       	lsr	r24
 6c8:	77 95       	ror	r23
 6ca:	67 95       	ror	r22
 6cc:	b1 1d       	adc	r27, r1
 6ce:	93 95       	inc	r25
 6d0:	96 39       	cpi	r25, 0x96	; 150
 6d2:	c8 f3       	brcs	.-14     	; 0x6c6 <__fp_trunc+0x20>
 6d4:	08 95       	ret

000006d6 <__fp_zero>:
 6d6:	e8 94       	clt

000006d8 <__fp_szero>:
 6d8:	bb 27       	eor	r27, r27
 6da:	66 27       	eor	r22, r22
 6dc:	77 27       	eor	r23, r23
 6de:	cb 01       	movw	r24, r22
 6e0:	97 f9       	bld	r25, 7
 6e2:	08 95       	ret

000006e4 <__divmodhi4>:
 6e4:	97 fb       	bst	r25, 7
 6e6:	07 2e       	mov	r0, r23
 6e8:	16 f4       	brtc	.+4      	; 0x6ee <__divmodhi4+0xa>
 6ea:	00 94       	com	r0
 6ec:	07 d0       	rcall	.+14     	; 0x6fc <__divmodhi4_neg1>
 6ee:	77 fd       	sbrc	r23, 7
 6f0:	09 d0       	rcall	.+18     	; 0x704 <__divmodhi4_neg2>
 6f2:	0e 94 86 03 	call	0x70c	; 0x70c <__udivmodhi4>
 6f6:	07 fc       	sbrc	r0, 7
 6f8:	05 d0       	rcall	.+10     	; 0x704 <__divmodhi4_neg2>
 6fa:	3e f4       	brtc	.+14     	; 0x70a <__divmodhi4_exit>

000006fc <__divmodhi4_neg1>:
 6fc:	90 95       	com	r25
 6fe:	81 95       	neg	r24
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	08 95       	ret

00000704 <__divmodhi4_neg2>:
 704:	70 95       	com	r23
 706:	61 95       	neg	r22
 708:	7f 4f       	sbci	r23, 0xFF	; 255

0000070a <__divmodhi4_exit>:
 70a:	08 95       	ret

0000070c <__udivmodhi4>:
 70c:	aa 1b       	sub	r26, r26
 70e:	bb 1b       	sub	r27, r27
 710:	51 e1       	ldi	r21, 0x11	; 17
 712:	07 c0       	rjmp	.+14     	; 0x722 <__udivmodhi4_ep>

00000714 <__udivmodhi4_loop>:
 714:	aa 1f       	adc	r26, r26
 716:	bb 1f       	adc	r27, r27
 718:	a6 17       	cp	r26, r22
 71a:	b7 07       	cpc	r27, r23
 71c:	10 f0       	brcs	.+4      	; 0x722 <__udivmodhi4_ep>
 71e:	a6 1b       	sub	r26, r22
 720:	b7 0b       	sbc	r27, r23

00000722 <__udivmodhi4_ep>:
 722:	88 1f       	adc	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	5a 95       	dec	r21
 728:	a9 f7       	brne	.-22     	; 0x714 <__udivmodhi4_loop>
 72a:	80 95       	com	r24
 72c:	90 95       	com	r25
 72e:	bc 01       	movw	r22, r24
 730:	cd 01       	movw	r24, r26
 732:	08 95       	ret

00000734 <_exit>:
 734:	f8 94       	cli

00000736 <__stop_program>:
 736:	ff cf       	rjmp	.-2      	; 0x736 <__stop_program>
